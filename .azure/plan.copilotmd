# Azure Deployment Plan for ECONEURA Project

## **Goal**
Deploy ECONEURA Cockpit (frontend + backend API) to Azure using Azure Developer CLI (azd) with Azure Container Apps.

## **Project Information**

**ECONEURA Cockpit**  
- **Stack**: React 18 + Vite 5 (Frontend), Node.js 18+ (Backend API)  
- **Type**: AI Agent Orchestration Platform with interactive UI  
- **Containerization**: Dockerfiles needed (will be generated)  
- **Dependencies**: None (backend connects to external Make.com webhooks)  
- **Hosting**: Azure Container Apps (Frontend + Backend as separate containers)

**Services to Deploy**:
1. **Frontend Cockpit** (`apps/web`): React SPA with Vite
2. **Backend API** (`apps/api_node`): Node.js HTTP proxy to Make.com

## **Azure Resources Architecture**

```mermaid
graph TB
    User[üë§ User Browser] --> |HTTPS| FrontendCA[üåê Frontend Container App<br/>React + Vite]
    FrontendCA --> |REST API| BackendCA[‚öôÔ∏è Backend Container App<br/>Node.js API]
    BackendCA --> |Webhooks| MakeCom[üîó Make.com<br/>External Service]
    
    ACR[üì¶ Azure Container Registry] -.->|Pull Image| FrontendCA
    ACR -.->|Pull Image| BackendCA
    
    AppInsights[üìä Application Insights] -.->|Telemetry| FrontendCA
    AppInsights -.->|Telemetry| BackendCA
    
    LogAnalytics[üìù Log Analytics Workspace] -.->|Logs| AppInsights
    
    ManagedIdentity[üîê User-Assigned<br/>Managed Identity] -.->|Auth| FrontendCA
    ManagedIdentity -.->|Auth| BackendCA
    ManagedIdentity -.->|AcrPull| ACR
    
    style FrontendCA fill:#0078d4,color:#fff
    style BackendCA fill:#0078d4,color:#fff
    style ACR fill:#50e6ff,color:#000
    style AppInsights fill:#00bcf2,color:#000
    style ManagedIdentity fill:#00d4aa,color:#000
```

**Service Relations**:
- Frontend Container App serves React SPA to users via HTTPS
- Frontend makes REST API calls to Backend Container App
- Backend proxies requests to Make.com webhooks (external service)
- Both containers pull images from Azure Container Registry using Managed Identity (AcrPull role)
- Application Insights collects telemetry from both containers
- Log Analytics Workspace stores logs and metrics centrally
- User-Assigned Managed Identity provides secure authentication between Azure services

## **Recommended Azure Resources**

### **1. Frontend Application (ECONEURA Cockpit UI)**
- **Hosting Service Type**: Azure Container Apps
- **SKU**: Consumption Plan (0.5 vCPU, 1 GB RAM)
  - Auto-scales from 0 to 10 replicas
  - Pay-per-use pricing model
  - Suitable for web frontends with variable traffic
- **Configuration**:
  - Language: `Node.js 18+` (for Vite build)
  - Environment Variables:
    - `VITE_API_BASE_URL`: URL of backend container app (set post-deployment)
    - `VITE_MAKE_TOKEN`: Placeholder token for development
    - `VITE_DEFAULT_ROUTE`: `azure`
  - dockerFilePath: `apps/web/Dockerfile`
  - dockerContext: `apps/web`
- **Dependencies**: None

### **2. Backend API (ECONEURA Backend Proxy)**
- **Hosting Service Type**: Azure Container Apps
- **SKU**: Consumption Plan (0.5 vCPU, 1 GB RAM)
  - Auto-scales from 1 to 10 replicas
  - Always-on for API availability
- **Configuration**:
  - Language: `Node.js 18+`
  - Environment Variables:
    - `PORT`: `8080` (default for Azure Container Apps)
    - `MAKE_FORWARD`: `1` (enable forwarding to Make.com)
    - `MAKE_TOKEN`: User's Make.com webhook token (from Key Vault)
  - dockerFilePath: `apps/api_node/Dockerfile`
  - dockerContext: `apps/api_node`
- **Dependencies**: None

## **Recommended Supporting Services**

- **Azure Container Registry** (Basic SKU)
  - Stores Docker images for both frontend and backend
  - 10 GB storage, 10 webhooks
  
- **Application Insights** (Standard)
  - Real-time monitoring and telemetry
  - Logs API requests, errors, performance metrics
  
- **Log Analytics Workspace** (Pay-as-you-go)
  - Centralized log storage
  - Connected to both Container Apps and App Insights
  
- **User-Assigned Managed Identity**
  - Secure authentication between Azure resources
  - No credentials in code or config
  
- **Azure Key Vault** (Standard SKU - Optional)
  - Stores `MAKE_TOKEN` securely
  - Referenced by Backend Container App via Managed Identity

## **Recommended Security Configurations**

1. **User-Assigned Managed Identity Permissions**:
   - Must have **Key Vault Secrets User** role on Key Vault (if using)
   - Must have **AcrPull** role (`7f951dda-4ed3-4680-a7ca-43fe172d538d`) on Container Registry

2. **Container Apps Configuration**:
   - User-Assigned Managed Identity assigned to both Frontend and Backend containers
   - Ingress enabled with HTTPS only
   - CORS configured on Backend to allow Frontend origin

3. **Key Vault Access** (if used):
   - Network rules: Allow Azure services
   - Access policies: Managed Identity has Get/List secrets permissions

## **Execution Steps**

> **Below are the steps for Copilot to follow; ask Copilot to update or execute this plan. Add checklist for the steps.**

### **1. Pre-Deployment Checks**
- [ ] Verify Azure CLI installed: `az --version`
- [ ] Verify Azure Developer CLI installed: `azd version`
- [ ] Check Azure login status: `az account show`
- [ ] Get subscription ID and verify quota availability

### **2. Provision Azure Infrastructure with AZD**
- [ ] **Provisioning Tool**: AZD (Azure Developer CLI)
- [ ] **Expected Files**: `azure.yaml`, `infra/main.bicep`, `infra/main.parameters.json`
- [ ] Check for existing infrastructure files:
  - If exist: Validate against plan requirements
  - If missing: Generate all required files using `appmod-get-iac-rules`
- [ ] Get region recommendations: Call `appmod-get-regions-with-sufficient-quota` with:
  - Resource types: `Microsoft.App/containerApps`, `Microsoft.ContainerRegistry/registries`
  - Preferred regions: `eastus`, `westus2`, `westeurope`
- [ ] Generate infrastructure files (Bicep templates)
- [ ] Run `azd provision --preview --no-prompt` (dry run)
- [ ] Fix any Bicep errors using `get_errors` tool
- [ ] Iterate until dry run succeeds

### **3. Environment Setup for AZD**
- [ ] Create AZD environment: `azd env new econeura-prod --no-prompt`
- [ ] Set required environment variables:
  - `AZURE_SUBSCRIPTION_ID`: User's subscription ID
  - `AZURE_LOCATION`: Selected region (e.g., `eastus`)
  - `AZURE_RESOURCE_GROUP`: `rg-econeura-prod`
  - `MAKE_TOKEN`: User's Make.com webhook token (prompt user)
- [ ] Verify environment: `azd env list`

### **4. Containerization**
- [ ] Generate `apps/web/Dockerfile` (multi-stage build: build + serve)
- [ ] Generate `apps/api_node/Dockerfile` (Node.js runtime)
- [ ] Create `.dockerignore` files for both services
- [ ] Test builds locally:
  - `docker build -t econeura-web:local apps/web`
  - `docker build -t econeura-api:local apps/api_node`
- [ ] Verify builds succeed without errors

### **5. Deployment**
- [ ] Run `azd up --no-prompt` (provision + deploy in one command)
- [ ] Monitor deployment progress
- [ ] If errors occur:
  - Log error details
  - Fix infrastructure or Docker issues
  - Retry: `azd deploy --no-prompt`
- [ ] If region issues: Reset with `azd down --force --no-prompt` and retry with different region

### **6. Post-Deployment Configuration**
- [ ] Get Backend Container App URL: `az containerapp show --name ca-econeura-backend --resource-group rg-econeura-prod --query properties.configuration.ingress.fqdn -o tsv`
- [ ] Update Frontend environment variable:
  - `az containerapp update --name ca-econeura-frontend --set-env-vars VITE_API_BASE_URL=<backend-url>`
- [ ] Restart Frontend container: `az containerapp revision restart --name ca-econeura-frontend --resource-group rg-econeura-prod`

### **7. Deployment Validation**
- [ ] Test Frontend: Open browser to Frontend Container App URL
- [ ] Test Backend health: `curl https://<backend-url>/api/health`
- [ ] Test end-to-end: Invoke agent from UI, verify response
- [ ] Check Application Insights: Verify telemetry data flowing
- [ ] Review logs in Log Analytics Workspace

### **8. Summarize Deployment Result**
- [ ] Use `appmod-summarize-result` tool to generate summary
- [ ] Generate deployment report: `.azure/summary.copilotmd`
- [ ] Document URLs, resource names, and configuration

## **Progress Tracking**

Copilot will create and update `.azure/progress.copilotmd` after each step with:

- ‚úÖ **Completed tasks**: Steps that executed successfully
- üî≤ **Pending tasks**: Steps not yet started
- ‚ùå **Failed tasks**: Steps that failed with error details and retry attempts

**Example Progress Format**:
```markdown
## Deployment Progress

### ‚úÖ Completed
- [x] Azure CLI installed and logged in
- [x] Subscription ID retrieved: `abc123...`
- [x] Region selected: `eastus` (sufficient quota confirmed)
- [x] Dockerfiles generated for frontend and backend

### üî≤ Pending
- [ ] Run `azd provision --preview`
- [ ] Deploy containers to Azure

### ‚ùå Failed
- [x] ~~Initial `azd up` failed: ACR authentication error~~
  - **Attempt 1**: Error 401 Unauthorized when pushing to ACR
  - **Fix Applied**: Added Managed Identity AcrPull role assignment in Bicep
  - **Attempt 2**: ‚úÖ Succeeded
```

## **Next Steps**

¬øQuieres que empiece con el despliegue? Necesito:
1. ‚úÖ Confirmar que est√°s autenticado en Azure (`az account show`)
2. ‚ùì Tu **Subscription ID** (o usar la predeterminada)
3. ‚ùì Regi√≥n preferida (recomiendo `eastus` o `westeurope`)
4. ‚ùì **MAKE_TOKEN** (tu token de Make.com para webhooks)

**¬øComenzamos?** üöÄ
